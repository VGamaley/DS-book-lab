[["index.html", "Data Science  R.    1 ", " Data Science  R.   ©  . . 2022-03-08  1             ,                     . : , . . .  .  ,      ,              R,      ,  vignetts      CRAN.        .       CRISP DM (wikipedia 2022)               :    ,   , ,    Data Science-.         vnsidorenko@gmail.com. References "],["modul1.html", " 2  1. .   1.    Data Science- 2.1    ? 2.2    2.3   Markdown-", "  2  1. .   1.    Data Science- :      Data Science-   R-Studio (RStudio Team 2020)         R (R Core Team 2021),  RMarkdown     LaTeX. 2.1    ?  / ,   ,        R   IDE RStudio.    (  html, pdf, doc)   ,     ( ,  /   . .).    LaTeX   , ,  : \\(y(x)=b_0+b_1x+b_2x^2\\).      BibTeX,      References,    . 2.2    2.2.1   Data Science-? - Data Science- (   Data Mining-)        CRISP DM (wikipedia 2022).    CRISP-DM 1.0    Data Mining      (. 1): -  - (business understanding); -   (data understanding); -   (data preparation); -  (modeling); -  (evaluation); -  (deployment). . 1.    Data Mining    CRISP   -   : -  -; -  ; -   Data Mining; -   .      : -   ; -  ; -  ; -   .        ,        .     : -  ; -  ; -  ; -  ; -  .   -               .      : -   ; -   ; -  ; -  .   -          ,      -.     : -  ; -  ; -   .     .        ,     - Data Science-     (Garrett Grolemund 2018) (. 2). . 2.   Data Science- (Garrett Grolemund 2018)     (Import)        -  (, ,        . .)   .   (Tidy)        ,   .           -, ,  , -.            (Wrangling, Munging),    , ,    (Missing Value Emputation),    (data reduction),    (Transforming)  . . , Tiding+Transforming=Wrangling(Munging).   -- (Transform-Visualise-Model)   Data Mining-,                ,    ,      ,     ,   .        (Understanding) ,   ,            .            (ommunicate)   ,    ,        , ,   .    Data Science-   ,         ,    ,      -     ,   ,      .     R     , IDE RStudio             Data Science-,      . 2.2.2                 : , ,  ,   ,     : .doc, pdf, .html .          -                     .     Data Science,               Data Science.   (Literate Programming)  ,    ,                 .            ,      ,     ,        .         (. Markdown, YAML, HTML, LaTeX),        ,       .  ,     ,            .       (IDE, Integrated Development Environment,   ),      .                (. 3): IDE R Studio (RStudio Team 2020)    ;    R (R Core Team 2021)            ;  RMarkdown (Allaire et al. 2022)        Markdown; (.(sandino 2013)    RStudio: Help\\Cheat_Sheets);    . ;  . R Markdown: .    ;    LaTex     . . 3.              (literate programming) 2.2.3 Markdown  RMarkdown Markdown (: [])     ,                structurally valid XHTML  HTML.  ,  GitHub, Reddit  Stack Overflow  Markdown     . R Markdown (Yihui Xie 2018)   R,     Markdown-   IDE RStudio           R   .                   .    ,  R, Python, ++, HTML, SQL, Stan.   Pandoc     html, doc  pdf    -, , , . 2.2.4  R      CRAN,      R.   R   GUI,     . ,   Contributed,      ,   .         R      . ,     . 2.2.5  RStudio      ,     RMarkdown    ,   IDE RStudio. 2.2.6  RMarkdown-  RStudio.  RMarkdown-   R Notebook,    . 2.2.7          Ctrl+Shift+K. 2.3   Markdown- 2.3.1      \\(y(x)=b_ox+b_1+b_2x^2\\)   \\(x \\in [x_1;x_2]\\). 2.3.2     R Markdown,     .  RMarkdown-.    YAML- ,       (. 4). . 4.  YAML-  ,         LaTeX     .   RMarkdown-      $: $y(x)=b_ox+b_1+b_2x^2$    R      ,    @ref(fig:fig_1): #    b0 &lt;- 2 b1 &lt;- 3 b2 &lt;- 1.57 #    x &lt;- seq(-1, 1, .1) y &lt;- b0 + b1 * x + b2 * x^2 plot(x, y, type = &quot;l&quot;, col = &quot;red&quot;, main = &quot; &quot;, xlab = &quot;x&quot;, ylab = &quot;y&quot; ) points(x, y, col = &quot;blue&quot;) (#fig:fig_1)Example fig. df &lt;- data.frame(x = x, y = y) #       rio (Chan and Leeper 2021)   ()    ( ). # install.packages(&quot;rio&quot;) #   library(rio) #   export(df, &quot;data/data.csv&quot;)           @ref(tab:tab_1). dfNew &lt;- import(&quot;data/data.csv&quot;) #   knitr knitr::kable(head(dfNew), caption = &quot;_. 1.   _&quot;) (#tab:tab_1). 1.    x y -1.0 0.5700 -0.9 0.5717 -0.8 0.6048 -0.7 0.6693 -0.6 0.7652 -0.5 0.8925 #   stargazer # stargazer::stargazer(head(dfNew), # type = &quot;html&quot;, # summary = FALSE, # title = &quot;_. 1.   _&quot;) #   xtable # print(xtable::xtable(head(dfNew), # type = &quot;html&quot;, # html.table.attributes=&quot;border=0&quot;, # summary = FALSE, # caption = &quot;_. 1.   _&quot;))   . . 2.     \\(b_0\\) 2 \\(b_1\\) 3 \\(b_2\\) 1.57 \\(x_1\\) -1 \\(x_2\\) 1 2.3.3       . 2.3.4       ggplot2 (Wickham 2009).  ,    ,     %&gt;%   ggplot2.      ggplot2. (Wickham et al. 2021) References "],["--2.--.html", " 3   2.   3.1    ? 3.2    3.3    ", "  3   2.   :  ,         (wrangle)    R    tidyverse (Wickham 2021b). 3.1    ?       ,       R   IDE RStudio.             tidyr (Wickham and Girlich 2022).     R   IDE RStudio    dplyr (Wickham et al. 2022)     %&gt;%. 3.2    3.2.1    ? Wrangle     ,                   : Tidy + Transform = Wrangle. (Garrett Grolemund 2018) (. 1).      ,   , ,      . . 1.       Data Science- (Garrett Grolemund 2018) 3.2.2       (Import)        -  (, ,        . .)   .           (    (Tabular Data)   (Non-Tabular Data)):         ;      ,     ,        ;   - ,  ,    .         R     ,      .  ,    ,     rio (Chan et al. 2018),    . . 1. # install_formats() #    rio library(rio) df &lt;- data.frame(x = 1:5, y = rnorm(5)) export(df, &quot;data/df_data_frame.txt&quot;) dfImp &lt;- import(&quot;data/df_data_frame.txt&quot;) dfImp ## x y ## 1 1 1.41223782 ## 2 2 0.11474652 ## 3 3 0.74635090 ## 4 4 -0.09338315 ## 5 5 -0.90056857                   . data(&quot;mtcars&quot;) #    mtcars # head(mtcars) export(head(mtcars), &quot;data/mtcars.dta&quot;) convert(&#39;data/mtcars.dta&#39;, &#39;data/mtcars.csv&#39;) import(&quot;data/mtcars.csv&quot;) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## 2 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## 3 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## 4 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## 5 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## 6 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 3.2.2.1       dplyr (Wickham et al. 2022)          .        dbplyr (Wickham, Girlich, and Ruiz 2021).            ,     ,      data.frame (. ). dbplyr         ,     SQL. ,        SQL!    dbplyr     DBI.  DBI   ,   dbplyr      ,      . DBI     dbplyr,         ,     : RMySQL (Ooms et al. 2021)   MySQL  MariaDB; RPostgreSQL (Conway et al. 2021)   Postgres  Redshift; RSQLite (Müller et al. 2022)  SQLite- ; odbc (Hester and Wickham 2021)           ; bigrquery (Wickham and Bryan 2021)   Google BigQuery.         SQLite,        R.     -         .    SQLite  dplyr  :     ,     : library(dbplyr) library(dplyr) library(RSQLite) # my_db &lt;- src_sqlite(&quot;data/my_db.sqlite3&quot;, create = T) my_db    ,      flights (   (Wickham 2021a))     copy_to().       ,      ,         ,       R. library(nycflights13) # flights_sqlite &lt;- copy_to(my_db, flights, temporary = FALSE, # indexes = list(c(&quot;year&quot;, &quot;month&quot;, &quot;day&quot;), &quot;carrier&quot;, &quot;tailnum&quot;)) # head(flights_sqlite)           DBConnect,     DBI (R Special Interest Group on Databases (R-SIG-DB), Wickham, and Muller 2021). con &lt;- DBI::dbConnect(RSQLite::SQLite(), path = &quot;data/my_db.sqlite3&quot;) flights_sqlite &lt;- copy_to(con, nycflights13::flights, &quot;flights&quot;, temporary = FALSE, indexes = list( c(&quot;year&quot;, &quot;month&quot;, &quot;day&quot;), &quot;carrier&quot;, &quot;tailnum&quot;, &quot;dest&quot; ) ) head(flights_sqlite) ## # Source: lazy query [?? x 19] ## # Database: sqlite 3.37.2 [] ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## # ... with 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, ## # hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dbl&gt; DBI::dbDisconnect(con)        ,    RStudio (Wickham, Girlich, and Ruiz 2021),       RStudio,         dplyr.       ,         ,     reader (Cooper 2017)           read_*, col_*, parse_*,   (strings),   (factors),   - (data-time) (.  Data import with readr, readxl, and googlesheets4 cheatsheet),     tidyvers. 3.2.3      3.2.3.1     (tidy data)?      (Tidy)        ,   .           -, ,  , -.  tidyvers      ,     tibbles,     data.frame.      tibble (Müller and Wickham 2021),    S3     . tibbles   data.frame      (.  ).    (Wickham and Girlich 2022),     tidyvers,     (Garrett Grolemund 2018). (   . (Wickham and Girlich 2022),    ).    ,     :      ;       ;        . . 2.   ,      (Garrett Grolemund 2018)       ?     :            ,   ,    ,        ;     R             ,   ,        .      ,    . library(tidyverse) #    10000 table1 %&gt;% #    mutate(rate = cases / population * 10000) #    ## # A tibble: 6 x 5 ## country year cases population rate ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan 1999 745 19987071 0.373 ## 2 Afghanistan 2000 2666 20595360 1.29 ## 3 Brazil 1999 37737 172006362 2.19 ## 4 Brazil 2000 80488 174504898 4.61 ## 5 China 1999 212258 1272915272 1.67 ## 6 China 2000 213766 1280428583 1.67 #     table1 %&gt;% count(year, wt = cases) ## # A tibble: 2 x 2 ## year n ## &lt;int&gt; &lt;int&gt; ## 1 1999 250740 ## 2 2000 296920   %&gt;%     .    :  sin(cos(x))     x %&gt;% cos() %&gt;% sin().           ggplot2 (Wickham et al. 2021)   . #        library(ggplot2) ggplot(table1, aes(year, cases)) + geom_line(aes(group = country), colour = &quot;grey50&quot;) + geom_point(aes(colour = country)) # table1 %&gt;% # mutate(rate = cases / population * 10000) %&gt;% # ggplot(aes(year, rate)) + # geom_line(aes(group = country), colour = &quot;grey50&quot;) + # geom_point(aes(colour = country))    .     rate       . 3.2.3.2  Spreading and Gathering          :         ;        .        tidyr   gather() spread(). 3.2.3.2.1 Gathering     ,         ,   .  table4a:   1999  2000    ,      ,   . table4a ## # A tibble: 3 x 3 ## country `1999` `2000` ## * &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Afghanistan 745 2666 ## 2 Brazil 37737 80488 ## 3 China 212258 213766      (gather)       (. 3). . 3  table4    (Garrett Grolemund 2018) table4a %&gt;% gather(`1999`, `2000`, key = &quot;year&quot;, value = &quot;cases&quot;) ## # A tibble: 6 x 3 ## country year cases ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Afghanistan 1999 745 ## 2 Brazil 1999 37737 ## 3 China 1999 212258 ## 4 Afghanistan 2000 2666 ## 5 Brazil 2000 80488 ## 6 China 2000 213766         ,    . tidy4a &lt;- table4a %&gt;% gather(`1999`, `2000`, key = &quot;year&quot;, value = &quot;cases&quot;) tidy4b &lt;- table4b %&gt;% gather(`1999`, `2000`, key = &quot;year&quot;, value = &quot;population&quot;) dplyr::left_join(tidy4a, tidy4b) ## Joining, by = c(&quot;country&quot;, &quot;year&quot;) ## # A tibble: 6 x 4 ## country year cases population ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Afghanistan 1999 745 19987071 ## 2 Brazil 1999 37737 172006362 ## 3 China 1999 212258 1272915272 ## 4 Afghanistan 2000 2666 20595360 ## 5 Brazil 2000 80488 174504898 ## 6 China 2000 213766 1280428583    .   ,    tidy4a  tidy4b    . 3.2.3.2.2 Spreading    . ,   (spreading) ,       (. 4). . 4  table2    (Garrett Grolemund 2018) . table2 ## # A tibble: 12 x 4 ## country year type count ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 Afghanistan 1999 cases 745 ## 2 Afghanistan 1999 population 19987071 ## 3 Afghanistan 2000 cases 2666 ## 4 Afghanistan 2000 population 20595360 ## 5 Brazil 1999 cases 37737 ## 6 Brazil 1999 population 172006362 ## 7 Brazil 2000 cases 80488 ## 8 Brazil 2000 population 174504898 ## 9 China 1999 cases 212258 ## 10 China 1999 population 1272915272 ## 11 China 2000 cases 213766 ## 12 China 2000 population 1280428583 table2 %&gt;% spread(key = type, value = count) ## # A tibble: 6 x 4 ## country year cases population ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Afghanistan 1999 745 19987071 ## 2 Afghanistan 2000 2666 20595360 ## 3 Brazil 1999 37737 172006362 ## 4 Brazil 2000 80488 174504898 ## 5 China 1999 212258 1272915272 ## 6 China 2000 213766 1280428583 3.2.3.3  Separating  Uniting     ,       .      (separating)   (. .5). . 5  table3       (Garrett Grolemund 2018) table3 ## # A tibble: 6 x 3 ## country year rate ## * &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 Afghanistan 1999 745/19987071 ## 2 Afghanistan 2000 2666/20595360 ## 3 Brazil 1999 37737/172006362 ## 4 Brazil 2000 80488/174504898 ## 5 China 1999 212258/1272915272 ## 6 China 2000 213766/1280428583 table3 %&gt;% separate(rate, into = c(&quot;cases&quot;, &quot;population&quot;)) ## # A tibble: 6 x 4 ## country year cases population ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Afghanistan 1999 745 19987071 ## 2 Afghanistan 2000 2666 20595360 ## 3 Brazil 1999 37737 172006362 ## 4 Brazil 2000 80488 174504898 ## 5 China 1999 212258 1272915272 ## 6 China 2000 213766 1280428583    separate()  unite(). table5 %&gt;% unite(new, century, year, sep = &quot;&quot;) ## # A tibble: 6 x 3 ## country new rate ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Afghanistan 1999 745/19987071 ## 2 Afghanistan 2000 2666/20595360 ## 3 Brazil 1999 37737/172006362 ## 4 Brazil 2000 80488/174504898 ## 5 China 1999 212258/1272915272 ## 6 China 2000 213766/1280428583 3.2.3.4     (missing value)       :  (  NA, Not Available)   (    ).    .   ,   . stocks &lt;- tibble( year = c(2015, 2015, 2015, 2015, 2016, 2016, 2016), qtr = c( 1, 2, 3, 4, 2, 3, 4), return = c(1.88, 0.59, 0.35, NA, 0.92, 0.17, 2.66) ) stocks ## # A tibble: 7 x 3 ## year qtr return ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 1 1.88 ## 2 2015 2 0.59 ## 3 2015 3 0.35 ## 4 2015 4 NA ## 5 2016 2 0.92 ## 6 2016 3 0.17 ## 7 2016 4 2.66     2015       .        ,   ,       . stocks %&gt;% spread(year, return) ## # A tibble: 4 x 3 ## qtr `2015` `2016` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1.88 NA ## 2 2 0.59 0.92 ## 3 3 0.35 0.17 ## 4 4 NA 2.66          complete(). stocks %&gt;% complete(year, qtr) ## # A tibble: 8 x 3 ## year qtr return ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 1 1.88 ## 2 2015 2 0.59 ## 3 2015 3 0.35 ## 4 2015 4 NA ## 5 2016 1 NA ## 6 2016 2 0.92 ## 7 2016 3 0.17 ## 8 2016 4 2.66      :   ,      ,    . stocks %&gt;% spread(year, return) %&gt;% gather(year, return, `2015`:`2016`, na.rm = TRUE) ## # A tibble: 6 x 3 ## qtr year return ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 2015 1.88 ## 2 2 2015 0.59 ## 3 3 2015 0.35 ## 4 2 2016 0.92 ## 5 3 2016 0.17 ## 6 4 2016 2.66  ,   ,    fill(),    ,      : df &lt;- data.frame(Month = 1:12, Year = c(2000, rep(NA, 11))) df ## Month Year ## 1 1 2000 ## 2 2 NA ## 3 3 NA ## 4 4 NA ## 5 5 NA ## 6 6 NA ## 7 7 NA ## 8 8 NA ## 9 9 NA ## 10 10 NA ## 11 11 NA ## 12 12 NA df %&gt;% fill(Year) ## Month Year ## 1 1 2000 ## 2 2 2000 ## 3 3 2000 ## 4 4 2000 ## 5 5 2000 ## 6 6 2000 ## 7 7 2000 ## 8 8 2000 ## 9 9 2000 ## 10 10 2000 ## 11 11 2000 ## 12 12 2000 3.2.4       .            :    ,     ,   ,    .  (Transform)         .  R       ,     ,           dplyr (Wickham et al. 2022)  ,      , .            (Wickham et al. 2022).   , dplyr    ,     ,         : mutate()   ,     . select()   ( )    . filter()   ()    . summarise()      . arrange()   .          group_by(),    -   .        dplyr       .        purrr (Henry and Wickham 2020)    ,     tidyverse.    , dplyr   ,    ,    .  ,                     R. ,        SQL-,     ,         . #    library(dplyr) starwars %&gt;% filter(species == &quot;Droid&quot;) ## # A tibble: 6 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none masculi~ ## 2 R2-D2 96 32 &lt;NA&gt; white, blue red 33 none masculi~ ## 3 R5-D4 97 32 &lt;NA&gt; white, red red NA none masculi~ ## 4 IG-88 200 140 none metal red 15 none masculi~ ## 5 R4-P17 96 NA none silver, red red, blue NA none feminine ## 6 BB8 NA NA none none black NA none masculi~ ## # ... with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; #    starwars %&gt;% select(name, ends_with(&quot;color&quot;)) ## # A tibble: 87 x 4 ## name hair_color skin_color eye_color ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Skywalker blond fair blue ## 2 C-3PO &lt;NA&gt; gold yellow ## 3 R2-D2 &lt;NA&gt; white, blue red ## 4 Darth Vader none white yellow ## 5 Leia Organa brown light brown ## 6 Owen Lars brown, grey light blue ## 7 Beru Whitesun lars brown light blue ## 8 R5-D4 &lt;NA&gt; white, red red ## 9 Biggs Darklighter black light brown ## 10 Obi-Wan Kenobi auburn, white fair blue-gray ## # ... with 77 more rows #         starwars %&gt;% mutate(name, bmi = mass / ((height / 100) ^ 2)) %&gt;% select(name:mass, bmi) ## # A tibble: 87 x 4 ## name height mass bmi ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Luke Skywalker 172 77 26.0 ## 2 C-3PO 167 75 26.9 ## 3 R2-D2 96 32 34.7 ## 4 Darth Vader 202 136 33.3 ## 5 Leia Organa 150 49 21.8 ## 6 Owen Lars 178 120 37.9 ## 7 Beru Whitesun lars 165 75 27.5 ## 8 R5-D4 97 32 34.0 ## 9 Biggs Darklighter 183 84 25.1 ## 10 Obi-Wan Kenobi 182 77 23.2 ## # ... with 77 more rows #   starwars %&gt;% arrange(desc(mass)) ## # A tibble: 87 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Jabba D~ 175 1358 &lt;NA&gt; green-tan~ orange 600 herm~ mascu~ ## 2 Grievous 216 159 none brown, wh~ green, y~ NA male mascu~ ## 3 IG-88 200 140 none metal red 15 none mascu~ ## 4 Darth V~ 202 136 none white yellow 41.9 male mascu~ ## 5 Tarfful 234 136 brown brown blue NA male mascu~ ## 6 Owen La~ 178 120 brown, gr~ light blue 52 male mascu~ ## 7 Bossk 190 113 none green red 53 male mascu~ ## 8 Chewbac~ 228 112 brown unknown blue 200 male mascu~ ## 9 Jek Ton~ 180 110 brown fair blue NA male mascu~ ## 10 Dexter ~ 198 102 none brown yellow NA male mascu~ ## # ... with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, ## # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; #        species starwars %&gt;% group_by(species) %&gt;% summarise( n = n(), mass = mean(mass, na.rm = TRUE) ) %&gt;% filter(n &gt; 1) ## # A tibble: 9 x 3 ## species n mass ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Droid 6 69.8 ## 2 Gungan 3 74 ## 3 Human 35 82.8 ## 4 Kaminoan 2 88 ## 5 Mirialan 2 53.1 ## 6 Twi&#39;lek 2 55 ## 7 Wookiee 2 124 ## 8 Zabrak 2 80 ## 9 &lt;NA&gt; 4 48  tidyr  dplyr    ( stringr  forcats),        : lubridate (Spinu, Grolemund, and Wickham 2021)      -. hms (Muller 2021)     . blob [R-blob]  ,    (blob) .    .    ,        (Ogurtsov 2022).      dplyr  RStudio. 3.3     3.3.1     ,   SQLite.         nycflights13    -  2013 .  : (year, month, day), carrier, tailnum, dest.  RMarkdown-,            :   year:day, dep_delay, arr_delay   flights.       (dep_delay)   240 .      (dep_time)       (dest).           100       ;       .                ;          (  ggplot2).           . 3.3.2     ,   SQLite. # my_db &lt;- src_sqlite(&quot;data/my_db.sqlite3&quot;, create = T)   .         nycflights13    -  2013 .  : (year, month, day), carrier, tailnum, dest. con &lt;- DBI::dbConnect(RSQLite::SQLite(), path = &quot;data/my_db.sqlite3&quot;) flights_sqlite &lt;- copy_to(con, nycflights13::flights, &quot;flights&quot;, temporary = FALSE, indexes = list( c(&quot;year&quot;, &quot;month&quot;, &quot;day&quot;), &quot;carrier&quot;, &quot;tailnum&quot;, &quot;dest&quot; ) ) head(flights_sqlite) ## # Source: lazy query [?? x 19] ## # Database: sqlite 3.37.2 [] ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 819 ## 2 2013 1 1 533 529 4 850 830 ## 3 2013 1 1 542 540 2 923 850 ## 4 2013 1 1 544 545 -1 1004 1022 ## 5 2013 1 1 554 600 -6 812 837 ## 6 2013 1 1 554 558 -4 740 728 ## # ... with 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, ## # hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dbl&gt;   year:day, dep_delay, arr_delay   flights. flights_sqlite %&gt;% select(year:day, dep_delay, arr_delay) ## # Source: lazy query [?? x 5] ## # Database: sqlite 3.37.2 [] ## year month day dep_delay arr_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 ## 2 2013 1 1 4 20 ## 3 2013 1 1 2 33 ## 4 2013 1 1 -1 -18 ## 5 2013 1 1 -6 -25 ## 6 2013 1 1 -4 12 ## 7 2013 1 1 -5 19 ## 8 2013 1 1 -3 -14 ## 9 2013 1 1 -3 -8 ## 10 2013 1 1 -2 8 ## # ... with more rows       (dep_delay)   240 . flights_sqlite %&gt;% filter(dep_delay &gt; 240) ## # Source: lazy query [?? x 19] ## # Database: sqlite 3.37.2 [] ## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 848 1835 853 1001 1950 ## 2 2013 1 1 1815 1325 290 2120 1542 ## 3 2013 1 1 1842 1422 260 1958 1535 ## 4 2013 1 1 2115 1700 255 2330 1920 ## 5 2013 1 1 2205 1720 285 46 2040 ## 6 2013 1 1 2343 1724 379 314 1938 ## 7 2013 1 2 1332 904 268 1616 1128 ## 8 2013 1 2 1412 838 334 1710 1147 ## 9 2013 1 2 1607 1030 337 2003 1355 ## 10 2013 1 2 2131 1512 379 2340 1741 ## # ... with more rows, and 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, ## # flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, ## # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dbl&gt;      (dep_time)       (dest). flights_sqlite %&gt;% group_by(dest) %&gt;% summarise(delay = mean(dep_time)) ## Warning: Missing values are always removed in SQL. ## Use `mean(x, na.rm = TRUE)` to silence this warning ## This warning is displayed only once per session. ## # Source: lazy query [?? x 2] ## # Database: sqlite 3.37.2 [] ## dest delay ## &lt;chr&gt; &lt;dbl&gt; ## 1 ABQ 2006. ## 2 ACK 1033. ## 3 ALB 1627. ## 4 ANC 1635. ## 5 ATL 1293. ## 6 AUS 1521. ## 7 AVL 1175. ## 8 BDL 1490. ## 9 BGR 1690. ## 10 BHM 1944. ## # ... with more rows           100       ;       . tailnum_delay_sqlite &lt;- flights_sqlite %&gt;% group_by(tailnum) %&gt;% summarise( delay = mean(arr_delay), n = n() ) %&gt;% arrange(desc(delay)) %&gt;% filter(n &gt; 100)                ;          (  ggplot2). library(ggplot2) planes &lt;- group_by(flights, tailnum) delay &lt;- summarise(planes, count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm = TRUE)) delay &lt;- filter(delay, count &gt; 20, dist &lt; 2000) ggplot(delay, aes(dist, delay)) + geom_point(aes(size = count), alpha = 1/2) + geom_smooth() + scale_size_area() ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## Warning: Removed 1 rows containing non-finite values (stat_smooth). ## Warning: Removed 1 rows containing missing values (geom_point).           . destinations &lt;- group_by(flights, dest) summarise(destinations, planes = n_distinct(tailnum), flights = n() ) ## # A tibble: 105 x 3 ## dest planes flights ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 ABQ 108 254 ## 2 ACK 58 265 ## 3 ALB 172 439 ## 4 ANC 6 8 ## 5 ATL 1180 17215 ## 6 AUS 993 2439 ## 7 AVL 159 275 ## 8 BDL 186 443 ## 9 BGR 46 375 ## 10 BHM 45 297 ## # ... with 95 more rows 3.3.3       . References "],["methods.html", " 4 Methods 4.1 math example", "  4 Methods We describe our methods in this chapter. Math can be added in body using usual syntax like this 4.1 math example \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\] You can also use math in footnotes like this1. We will approximate standard error to 0.0272 where we mention \\(p = \\frac{a}{b}\\) \\(p\\) is unknown but expected to be around 1/3. Standard error will be approximated \\[ SE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027 \\] "],["applications.html", " 5 Applications 5.1 Example one 5.2 Example two", "  5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", " 6 Final Words", "  6 Final Words We have finished a nice book. "],["references.html", "References", " References "]]
